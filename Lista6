class Grafo:
 
  def __init__(self, vertices):
        
    self.grafo = [[] for i in range(vertices)]
    self.maxN = vertices
    self.redeTransmissao = ["0"] * vertices

  def adicionaAresta(self, u, v):

    self.grafo[u-1].append(v-1)
    self.grafo[v-1].append(u-1)

  
  def printgr(self):
    print(self.redeTransmissao)

  def quemSabeDaFofoca(self, vertice):

    count = 1
    vertice = vertice - 1
    fila = []
    fila.append(vertice)

    visitei = [False] * grafo.maxN    
    visitei[vertice] = True
 
    while fila:
 
      vet = fila.pop(0)
 
      for i in self.grafo[vet]: 

        if visitei[i] == False:
          fila.append(i)
          count += 1
          visitei[i] = True
    i = 0
    while i < len(visitei):
      if visitei[i]:
        self.redeTransmissao[i] = str(count)
      i += 1
      

    return count
  
  def gerarFofoca(self):
    i = 1
    while i <= self.maxN:
      if self.redeTransmissao[i-1] == "0":
        self.quemSabeDaFofoca(i)
        
      i += 1
    print(" ".join(self.redeTransmissao))



if __name__== '__main__':



  fofoca = input().split(' ') 

  fofoqueiros = int(fofoca[0]) #vertices
  
  conexoes = int(fofoca[1]) #quantidade de arestas
  
  grafo = Grafo(fofoqueiros) #inicializa o grafo com os vertices
  
  i = 1

  while i <= conexoes: #adiciona cada aresta
    repassaFofoca = input().split(' ')
    grafo.adicionaAresta(int(repassaFofoca[0]), int(repassaFofoca[1]))
    i += 1

  grafo.gerarFofoca()
